<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.10">
  <POU Name="FB_MotionReferenceGenerator_HMI" Id="{5c4952c5-ef38-4d03-b32b-566ac8475273}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MotionReferenceGenerator_HMI
VAR_INPUT
	bEnable: BOOL;
	fStartPosition_m: LREAL;
	fStartVelocity_m: LREAL;
	fPositionSetpoint_m: LREAL;
	fVelocitySetpoint_m: LREAL;
	fTimeBeforeStarting_s: LREAL;
	fRampTime_s: LREAL;
	fHoldPositionTime_s: LREAL;
	fClock_s: LREAL;
END_VAR
VAR_OUTPUT
	fPositionReference_m: LREAL;
	fVelocityReference_m: LREAL;
	fTotalMotionTime_s: LREAL;
	fErrorSignal: LREAL;
END_VAR
VAR
	Error: DINT;
	slopeExt: LREAL;
	tHold: LREAL;
	x1: LREAL;
	x4: LREAL;
	rtb_Saturation3: LREAL;
	x1_tmp: LREAL;
	x1_tmp_tmp: LREAL;
	x4_tmp: LREAL;
	x4_tmp_tmp: LREAL;
	x4_tmp_tmp_0: LREAL;
	x4_tmp_tmp_1: LREAL;
	x1_tmp_0: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* Outputs for Atomic SubSystem: '<Root>/FB_MotionReferenceGenerator' *)
(* Saturate: '<S1>/Saturation2' *)

IF fVelocitySetpoint_m > 0.05 THEN 
    fPositionReference_m := 0.05;
ELSIF fVelocitySetpoint_m >= 0.0 THEN 
    fPositionReference_m := fVelocitySetpoint_m;
ELSE 
    fPositionReference_m := 0.0;
END_IF;

(* End of Saturate: '<S1>/Saturation2' *)


(* Saturate: '<S1>/Saturation3' *)

IF fPositionSetpoint_m > 0.45 THEN 
    rtb_Saturation3 := 0.45;
ELSIF fPositionSetpoint_m >= 0.0 THEN 
    rtb_Saturation3 := fPositionSetpoint_m;
ELSE 
    rtb_Saturation3 := 0.0;
END_IF;

(* End of Saturate: '<S1>/Saturation3' *)


(* MATLAB Function: '<S1>/WaveSignal' *)
(* MATLAB Function 'FB_MotionReferenceGenerator/WaveSignal': '<S2>:1' *)
(* '<S2>:1:2' x_SP = x_ref - x0; *)
(* '<S2>:1:3' vs=v_ref; *)
(* '<S2>:1:4' slopeExt=v0-vs; *)
slopeExt := fStartVelocity_m - fPositionReference_m;
(* '<S2>:1:5' slopeRetr=-vs-v0; *)
(* '<S2>:1:7' as = vs/tRamp; *)
(* '<S2>:1:8' s_acc=(vs^2-v0^2)/as; *)
(* '<S2>:1:10' tHold=(x_SP-s_acc)/vs; *)
tHold := ((rtb_Saturation3 - fStartPosition_m) - (((fPositionReference_m * fPositionReference_m) - (fStartVelocity_m * fStartVelocity_m)) / (fPositionReference_m / fRampTime_s))) / fPositionReference_m;
(* '<S2>:1:12' if tHold < 0 *)

IF tHold < 0.0 THEN 
    (* '<S2>:1:13' Error = 1; *)
    Error := 1;
ELSE 
    (* '<S2>:1:14' else *)
    (* '<S2>:1:15' Error = 0; *)
    Error := 0;
END_IF;

(* '<S2>:1:18' t1=tRamp; *)
(* '<S2>:1:19' t2=tHold; *)
(* '<S2>:1:20' t3=tRamp; *)
(* '<S2>:1:21' t4=tWait; *)
(* '<S2>:1:22' t5=t1; *)
(* '<S2>:1:23' t6=t2; *)
(* '<S2>:1:24' t7=t3; *)
(* '<S2>:1:26' x = x0; *)
(* '<S2>:1:27' x1 = x0 + v0*((t0+t1)-t0)-(slopeExt/t1)*((t0+t1)-t0)^2/2; *)
x1_tmp_tmp := fTimeBeforeStarting_s + fRampTime_s;
x1_tmp := x1_tmp_tmp - fTimeBeforeStarting_s;
x1_tmp_0 := slopeExt / fRampTime_s;
x1 := ((x1_tmp * fStartVelocity_m) + fStartPosition_m) - ((x1_tmp_0 * (x1_tmp * x1_tmp)) / 2.0);
(* '<S2>:1:28' x2 = x1 + vs*((t0+t1+t2)-(t0+t1)); *)
(* '<S2>:1:29' x4 = x_ref - v0*((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4))+(slopeRetr/t5)*((t0+t1+t2+t3+t4+t5)-(t0+t1+t2+t3+t4))^2/2; *)
x4_tmp_tmp := x1_tmp_tmp + tHold;
x4_tmp_tmp_0 := x4_tmp_tmp + fRampTime_s;
x4_tmp := x4_tmp_tmp_0 + fHoldPositionTime_s;
x4_tmp_tmp_1 := x4_tmp + fRampTime_s;
x4 := x4_tmp_tmp_1 - x4_tmp;
x1_tmp := (( -fPositionReference_m) - fStartVelocity_m) / fRampTime_s;
x4 := (rtb_Saturation3 - (x4 * fStartVelocity_m)) + ((x1_tmp * (x4 * x4)) / 2.0);
(* '<S2>:1:30' x5 = x4-vs*((t0+t1+t2+t3+t4+t5+t6)-(t0+t1+t2+t3+t4+t5)); *)
(* '<S2>:1:32' if Error == 1 *)

IF Error = 1 THEN 
    (* '<S2>:1:33' x = x0; *)
    rtb_Saturation3 := fStartPosition_m;
    (* '<S2>:1:34' v = v0; *)
    fPositionReference_m := fStartVelocity_m;
ELSIF (fClock_s >= 0.0) AND (fClock_s < fTimeBeforeStarting_s) THEN 
    (* '<S2>:1:35' elseif t>=0 && t<t0 *)
    (* '<S2>:1:36' x = x0; *)
    rtb_Saturation3 := fStartPosition_m;
    (* '<S2>:1:37' v = v0; *)
    fPositionReference_m := fStartVelocity_m;
ELSIF (fClock_s >= fTimeBeforeStarting_s) AND (fClock_s < x1_tmp_tmp) THEN 
    (* '<S2>:1:38' elseif t>=t0 && t<(t0+t1) *)
    (* '<S2>:1:39' x = x0 + v0*(t-t0)-(slopeExt/t1)*(t-t0)^2/2; *)
    x4_tmp_tmp_0 := fClock_s - fTimeBeforeStarting_s;
    rtb_Saturation3 := ((x4_tmp_tmp_0 * fStartVelocity_m) + fStartPosition_m) - ((x1_tmp_0 * (x4_tmp_tmp_0 * x4_tmp_tmp_0)) / 2.0);
    (* '<S2>:1:40' v = v0-(slopeExt/t1)*(t-t0); *)
    fPositionReference_m := fStartVelocity_m - (x1_tmp_0 * x4_tmp_tmp_0);
ELSIF (fClock_s >= x1_tmp_tmp) AND (fClock_s < x4_tmp_tmp) THEN 
    (* '<S2>:1:41' elseif t>=(t0+t1) && t<(t0+t1+t2) *)
    (* '<S2>:1:42' x = x1 + vs*(t-(t0+t1)); *)
    rtb_Saturation3 := ((fClock_s - x1_tmp_tmp) * fPositionReference_m) + x1;
    (* '<S2>:1:43' v = vs; *)
ELSIF (fClock_s >= x4_tmp_tmp) AND (fClock_s < x4_tmp_tmp_0) THEN 
    (* '<S2>:1:44' elseif t>=(t0+t1+t2) && t<(t0+t1+t2+t3) *)
    (* '<S2>:1:45' x = x2+vs*(t-(t0+t1+t2))+(slopeExt/t3)*(t-(t0+t1+t2))^2/2; *)
    x4_tmp_tmp_0 := fClock_s - x4_tmp_tmp;
    rtb_Saturation3 := ((((x4_tmp_tmp - x1_tmp_tmp) * fPositionReference_m) + x1) + (x4_tmp_tmp_0 * fPositionReference_m)) + ((x1_tmp_0 * (x4_tmp_tmp_0 * x4_tmp_tmp_0)) / 2.0);
    (* '<S2>:1:46' v = vs+(slopeExt/t3)*(t-(t0+t1+t2)); *)
    fPositionReference_m := (x4_tmp_tmp_0 * (slopeExt / fRampTime_s)) + fPositionReference_m;
ELSIF (fClock_s >= x4_tmp_tmp_0) AND (fClock_s < x4_tmp) THEN 
    (* '<S2>:1:47' elseif t>=(t0+t1+t2+t3) && t<(t0+t1+t2+t3+t4) *)
    (* '<S2>:1:48' x = x_ref; *)
    (* '<S2>:1:49' v = v0; *)
    fPositionReference_m := fStartVelocity_m;
ELSIF (fClock_s >= x4_tmp) AND (fClock_s < x4_tmp_tmp_1) THEN 
    (* '<S2>:1:50' elseif t>=(t0+t1+t2+t3+t4) && t<(t0+t1+t2+t3+t4+t5) *)
    (* '<S2>:1:51' x = x_ref - v0*(t-(t0+t1+t2+t3+t4))+(slopeRetr/t5)*(t-(t0+t1+t2+t3+t4))^2/2; *)
    slopeExt := fClock_s - x4_tmp;
    rtb_Saturation3 := (rtb_Saturation3 - (slopeExt * fStartVelocity_m)) + ((x1_tmp * (slopeExt * slopeExt)) / 2.0);
    (* '<S2>:1:52' v = v0+(slopeRetr/t5)*(t-(t0+t1+t2+t3+t4)); *)
    fPositionReference_m := (slopeExt * x1_tmp) + fStartVelocity_m;
ELSE 
    rtb_Saturation3 := x4_tmp_tmp_1 + tHold;

    IF (fClock_s >= x4_tmp_tmp_1) AND (fClock_s < rtb_Saturation3) THEN 
        (* '<S2>:1:53' elseif t>=(t0+t1+t2+t3+t4+t5) && t<(t0+t1+t2+t3+t4+t5+t6) *)
        (* '<S2>:1:54' x = x4-vs*(t-(t0+t1+t2+t3+t4+t5)); *)
        rtb_Saturation3 := x4 - ((fClock_s - x4_tmp_tmp_1) * fPositionReference_m);
        (* '<S2>:1:55' v = -vs; *)
        fPositionReference_m :=  -fPositionReference_m;
    ELSIF (fClock_s >= rtb_Saturation3) AND (fClock_s < (rtb_Saturation3 + fRampTime_s)) THEN 
        (* '<S2>:1:56' elseif t>=(t0+t1+t2+t3+t4+t5+t6) && t<(t0+t1+t2+t3+t4+t5+t6+t7) *)
        (* '<S2>:1:57' x = x5-vs*(t-(t0+t1+t2+t3+t4+t5+t6))-(slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6))^2/2; *)
        x4_tmp_tmp_0 := fClock_s - rtb_Saturation3;
        rtb_Saturation3 := ((x4 - ((rtb_Saturation3 - x4_tmp_tmp_1) * fPositionReference_m)) - (x4_tmp_tmp_0 * fPositionReference_m)) - ((x1_tmp * (x4_tmp_tmp_0 * x4_tmp_tmp_0)) / 2.0);
        (* '<S2>:1:58' v = -vs-(slopeRetr/t3)*(t-(t0+t1+t2+t3+t4+t5+t6)); *)
        fPositionReference_m := ( -fPositionReference_m) - (x4_tmp_tmp_0 * x1_tmp);
    ELSE 
        (* '<S2>:1:59' else *)
        (* '<S2>:1:60' x = x0; *)
        rtb_Saturation3 := fStartPosition_m;
        (* '<S2>:1:61' v = v0; *)
        fPositionReference_m := fStartVelocity_m;
    END_IF;

END_IF;

(* Switch: '<S1>/Switch' *)
(* '<S2>:1:64' T = t0+t1+t2+t3+t4+t5+t6+t7; *)

IF  NOT HMIinput.bHMIPowerSwitch THEN 
    fPositionReference_m := fStartVelocity_m;
END_IF;

(* End of Switch: '<S1>/Switch' *)


(* Saturate: '<S1>/Saturation' *)

IF fPositionReference_m > 0.05 THEN 
    (* Outport: '<Root>/fVelocityReference_m' *)
    fVelocityReference_m := 0.05;
ELSIF fPositionReference_m >= -0.05 THEN 
    (* Outport: '<Root>/fVelocityReference_m' *)
    fVelocityReference_m := fPositionReference_m;
ELSE 
    (* Outport: '<Root>/fVelocityReference_m' *)
    fVelocityReference_m := -0.05;
END_IF;

(* End of Saturate: '<S1>/Saturation' *)


(* Switch: '<S1>/Switch1' *)

IF HMIinput.bHMIPowerSwitch THEN 
    fPositionReference_m := rtb_Saturation3;
ELSE 
    fPositionReference_m := fStartPosition_m;
END_IF;

(* End of Switch: '<S1>/Switch1' *)


(* Saturate: '<S1>/Saturation1' *)

IF fPositionReference_m > 0.45 THEN 
    (* Outport: '<Root>/fPositionReference_m' *)
    fPositionReference_m := 0.45;
ELSIF fPositionReference_m < 0.0 THEN 
    (* Outport: '<Root>/fPositionReference_m' *)
    fPositionReference_m := 0.0;
END_IF;

(* End of Saturate: '<S1>/Saturation1' *)


(* Outport: '<Root>/fTotalMotionTime_s' incorporates:
 *  MATLAB Function: '<S1>/WaveSignal' *)
fTotalMotionTime_s := ((((((fTimeBeforeStarting_s + fRampTime_s) + tHold) + fRampTime_s) + fHoldPositionTime_s) + fRampTime_s) + tHold) + fRampTime_s;
(* Outport: '<Root>/fErrorSignal' incorporates:
 *  MATLAB Function: '<S1>/WaveSignal' *)
fErrorSignal := DINT_TO_LREAL(Error);
(* End of Outputs for SubSystem: '<Root>/FB_MotionReferenceGenerator' *)

]]></ST>
    </Implementation>
    <LineIds Name="FB_MotionReferenceGenerator_HMI">
      <LineId Id="3" Count="200" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>